[comment encoding = UTF-8 /]
[module entites_associations('http://www.eclipse.org/uml2/3.0.0/UML')]

[import rubyonrailsGenerator::templates::helpers /]

[** 
  	=================================================================			  
  				ENTITIES AND ASSOCIATIONS TEMPLATES   
	=================================================================
*/]

[template public generateEntitesAndAssociations(m : Model)]
	[m.packagedElement.generateRModel() /]
[/template]

[template public generateRModel(klass : PackageableElement) /]

[template public generateRModel(klass : Class)]
	[file (getModelFilename(klass) , false, 'UTF-8')]
class [klass.classify() /]  < [klass.superKlass() /]

  # Attributes
  attr_accessible [for (attr : Property | klass.attribute) separator (', ') ? (not isClass()) ][attr.name.to_sym()/][/for]

  # Associations
  [klass.generateAssociations()/]

  [klass.generateOperations()/]
  
end
	[/file]
[/template]

[template public generateMethod (op : Operation) ? (getReturnResult().type.name = 'Boolean') ]
# [op.getDesc() /]
def [op.name.concat('?') /] 
  [op.generateMethodProtectedContent() /]
end
[/template]

[template public generateMethod (op : Operation) ]
# [op.getDesc() /]
def [op.name /] 
  [op.generateMethodProtectedContent() /]
end
[/template]

[template public generateMethodProtectedContent(op : Operation)]
 # [protected ('for <' + op.name + '> method')]
 # Insert your code logic here ...
 # [/protected]
[/template]

[template public generateOperations(klass : Class)]
[for (op : Operation | klass.getAllOperations())]
[generateMethod(op)/]

[/for]
[/template]

[template public generateAssociations (klass : Class)]
[for (p : Property | klass.attribute) ? (isClass()) ]
  	[if 	( isOneToOne  (p, oppositeOf(p)) )]
  	[comment "Issue because I don't know which value to set as primary key" /]
has_one [p.name.to_sym() /]
    [elseif ( isOneToMany (p, oppositeOf(p)) )]
[belongs_to(p)/]
	[elseif ( isManyToOne (p, oppositeOf(p)) )]
[has_many(p) /]
	[elseif ( isManyToMany(p, oppositeOf(p)) )]
has_and_belongs_to_many [p.name.to_sym() /]
  	[/if]
  [/for]
[/template]

[template public generateRModel(enum : Enumeration) ]
	[file (getModelFilename(enum) , false, 'UTF-8')]
class [enum.classify() /] 
  [for (p : EnumerationLiteral | enum.ownedLiteral)  ]
  self.[p.name.toUpper() /] = [i /]
  [/for]
end
	[/file]
[/template]

[template public superKlass(klass : Class)]
	[if (klass.general.name->isEmpty())]
ActiveRecord::Base
	[else]
[klass.general.name /]				
	[/if]
[/template] 

[template public belongs_to(p : Property)]
	[if (p.hasRole())]
belongs_to [p.name.to_sym() /], 
			:class_name => "[oppositeOf(p).class.name /]", 
			:foreign_key => "[oppositeOf(p).class.name.underscore() /]_id" 
	[else]	
belongs_to [p.name.to_sym() /]  
	[/if]
[/template]

[template public has_many(p : Property)]
	[if (p.hasRole())]
has_many [p.name.to_sym() /], 
			:class_name => "[oppositeOf(p).class.name /]",
			:foreign_key => "[oppositeOf(p).class.name.underscore() /]_id" 
	[else]	
has_many [p.name.to_sym() /]  
	[/if]
[/template]

