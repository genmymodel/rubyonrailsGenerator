[comment encoding = UTF-8 /]
[module migrations('http://www.eclipse.org/uml2/3.0.0/UML')]

[import rubyonrailsGenerator::templates::helpers /]
[** 
  	=================================================================			  
  						MIGRATIONS  TEMPLATES   
	=================================================================
*/]


[template public generateMigrations(aModel : Model)]
[aModel.packagedElement->filter(Class).generateRMigration() /]
[aModel.generateJoinMigrations() /]
[/template]


[template public generateRMigration(klass : Class)]
	[file (klass.getMigrationFilename(), false, 'UTF-8')]
class [klass.getMigrationName() /] < ActiveRecord::Migration
  def change
    create_table [klass.name.underscore().pluralize().to_sym() /] do |t|
	  [for (attr : Property | klass.attribute) ? (not isClass() and not isEnum())]
	  	t.[attr.type.name.toLower() /] [attr.name.to_sym() /] 
	  [/for]

      t.timestamps # To generate rails timestamp fields 
    end
  end
end
	[/file]
[/template]


[template public generateJoinMigrations(model : Model)]
	[comment @main /]
	[for (assoc : Association | model.packagedElement->filter(Association))]
		[let p : Property = assoc.memberEnd->first() ]
			[p.generateOneToOneJoinRMigration() /]
		[/let]
	[/for]
[/template]


[template public generateOneToOneJoinRMigration(p : Property)]
	[file (p.getJoinMigrationFilename(), false, 'UTF-8')]
[let models : OrderedSet(Property) = Sequence{p,p.oppositeOf()}->sortedBy('name')->asOrderedSet()]
[for (p : Property | models) separator ('_')][p.class.name.pluralize() /][/for]
class [p.getJoinMigrationName() /] < ActiveRecord::Migration
  def change
	[let table_name : String = p.class.name]
    add_column [table_name.pluralize().to_sym() /], [p.oppositeOf().class.name.concat('_id').to_sym() /], :integer		
	[/let]
  end
end
[/let]
	[/file]
[/template]

[template public generateManyToManyJoinRMigration(p : Property)]
	[file (p.getJoinMigrationFilename(), false, 'UTF-8')]
class [p.getJoinMigrationName() /] < ActiveRecord::Migration
  def change
	create_table :assemblies_parts, :id => false do |t|
	[let table_name : String = p.class.name]
    add_column [table_name.pluralize().to_sym() /], [p.oppositeOf().class.name.concat('_id').to_sym() /], :integer		
	[/let]
  end
end
	[/file]
[/template]

