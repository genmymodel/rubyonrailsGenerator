[comment encoding = UTF-8 /]
[module views('http://www.eclipse.org/uml2/3.0.0/UML')]

[import rubyonrailsGenerator::templates::helpers /]


[template public generateViews(aModel : Model)]
[aModel.generateApplicationLayout() /]
[aModel.generateRViews()/]
[/template]


[template public generateRViews(model : Model)]
	[for (klass : Class | model.packagedElement->filter(Class))]
		[klass.generateFormView()/]     
		[klass.generateIndexView()/]    
		[klass.generateEditView()/]     
		[klass.generateNewView()/]      
		[klass.generateShowView()/]     
	[/for]
[/template]

[template public generateFormView(klass : Class)]
	[file (klass.getViewsFilename().concat('_form.html.erb'), false, 'UTF-8')]
		[let model_name : String = klass.name]
<%= form_for(@[model_name.underscore() /]) do |f| %>
  <% if @[model_name.underscore() /].errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@[model_name.underscore() /].errors.count, "error") %> prohibited this [model_name /] from being saved:</h2>

      <ul>
      <% @[model_name.underscore() /].errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

	[if (klass.hasSuper())]
		[for (attr : Property | klass.general.attribute) ? (isNeitherClassNorEnum())]
	<div class="field control-group">
		[field_for(attr) /]
	</div>
		[/for]	
	[else]
		[for (attr : Property | klass.attribute) ? (isNeitherClassNorEnum())]
	<div class="field control-group">
		[field_for(attr) /]
	</div>
		[/for]
	[/if]

	
  
  <div class="actions control-group">
    <div class="controls">
    <%= f.submit :class => 'btn' %>
	</div>
  </div>
<% end %>
		[/let]
	[/file]
[/template]

[template public generateIndexView(klass : Class)]
	[file (klass.getViewsFilename().concat('index.html.erb'), false, 'UTF-8')]
[let _model : String = klass.name ]
<div class="page-header">
<h1>Listing [_model.pluralize().toUpperFirst() /]</h1>
</div>


<table class="table table-bordered table-striped table-condensed">
  <tr>
	[if (klass.hasSuper())]
		[for (attr : Property  | klass.general.attribute) ? (isNeitherClassNorEnum())]
	<th>[attr.name.toUpperFirst() /]</th>
		[/for]
	[else]
		[for (attr : Property  | klass.attribute) ? (isNeitherClassNorEnum())]
	<th>[attr.name.toUpperFirst() /]</th>
		[/for]
	[/if]
	<th colspan="3" class="action">Actions</th>
  </tr>

<% @[_model.pluralize().underscore() /].each do |[_model.underscore() /]| %>
  <tr>
	[if (klass.hasSuper())]
		[for (attr : Property  | klass.general.attribute) ? (isNeitherClassNorEnum())]
	<td><%= [_model.underscore().concat('.').concat(attr.name) /] %></td>
		[/for]
	[else]
		[for (attr : Property  | klass.attribute) ? (isNeitherClassNorEnum())]
	<td><%= [_model.underscore().concat('.').concat(attr.name) /] %></td>
		[/for]
	[/if]

	[comment :
		Here we focus on Class attribute and whether we need to 
		add a <attr_name>_id field for those whih are associated
		to the main model.
	 /]
	[comment][for (attr : Property | klass.attribute) ? (isClass())]
		
	[/for][/comment]
    <td><%= link_to 'Show', [_model.underscore() /], :class => 'btn' %></td>
    <td><%= link_to 'Edit', edit_[_model.underscore() /]_path([_model.underscore() /]), :class => 'btn btn-primary' %></td>
    <td><%= link_to 'Destroy', [_model.underscore() /], :class => 'btn btn-danger',  method: :delete, data: { confirm: 'Are you sure?' } %></td>
  </tr>
<% end %>
</table>

<br />
<hr>
<%= link_to 'New [_model.toUpperFirst() /]', new_[klass.name.underscore()/]_path, :class => 'btn' %>
[/let]
	[/file]
[/template]

[template public generateShowView(klass : Class)]
	[file (klass.getViewsFilename().concat('show.html.erb'), false, 'UTF-8')]
<p id="notice"><%= notice %></p>
[let _model : String = klass.name ]
	[if (klass.hasSuper())]
		[for (attr : Property | klass.general.attribute) ? (isNeitherClassNorEnum())]
	<p>
	  <b>[attr.name.toUpperFirst() /]:</b>
	  <%= @[_model.underscore().concat('.').concat(attr.name) /] %>
	</p>	
		[/for]
	[else]
		[for (attr : Property | klass.attribute) ? (isNeitherClassNorEnum())]
	<p>
	  <b>[attr.name.toUpperFirst() /]:</b>
	  <%= @[_model.underscore().concat('.').concat(attr.name) /] %>
	</p>	
		[/for]
	[/if]

<hr>
<%= link_to 'Edit', edit_[_model.underscore()/]_path(@[_model.underscore()/]), :class => 'btn btn-primary' %> |
<%= link_to 'Back', [_model.pluralize().underscore()/]_path, :class => 'btn btn-inverse' %>
[/let]
	[/file]
[/template]

[template public generateEditView(klass : Class)]
	[file (klass.getViewsFilename().concat('edit.html.erb'), false, 'UTF-8')]
[let _model : String = klass.name ]
<div class="page-header">
<h1>Editing [_model.toUpperFirst()/]</h1>
</div>

<%= render 'form' %>

<%= link_to 'Show', @[_model.underscore()/], :class => 'btn' %> |
<%= link_to 'Back', [_model.pluralize().underscore()/]_path, :class => 'btn btn-inverse' %>
[/let]		
	[/file]
[/template]

[template public generateNewView(klass : Class)]
	[file (klass.getViewsFilename().concat('new.html.erb'), false, 'UTF-8')]
[let _model : String = klass.name ]
<div class="page-header">
<h1>New [_model.toUpperFirst()/]</h1>
</div>
<%= render 'form' %>
<hr>
<%= link_to 'Back', [_model.pluralize().underscore()/]_path, :class => 'btn btn-inverse' %>		
[/let]
	[/file]
[/template]

[template public generateApplicationLayout(model : Model)]
	[file (model.getLayoutsFilename(), false, 'UTF-8')]
<!DOCTYPE html>
<html>
<head>
  <title>[model.name /]</title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body>
<div class="hero-unit">
	<h1>[model.name /]<h1/>
</div>
<div class="container">
	<%= yield %>
</div>

</body>
</html>
	[/file]
[/template]


[template public field_for(p : Property) post (trim())]
<div class="controls">
[let tag_name : String = ':' + p.name]
	[if (type.name.equalsIgnoreCase('integer') or p.isEnum())]
<%= f.label :[p.name/], :class=>'control-label' %>
<%= f.number_field [tag_name /] %>
	[elseif (type.name.equalsIgnoreCase('boolean'))]
<label class="checkbox">
	<%= f.check_box(:[p.name/])	%> [p.name/]
</label>
	[else]
<%= f.label :[p.name/], :class=>'control-label' %>
<%= f.text_field [tag_name /] %>
	[/if]
[/let]
</div>
[/template]
